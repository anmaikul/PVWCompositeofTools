//import 'normalize.css';
import 'babel-polyfill';
import histogram from './histogram';

import metaDat from 'data/chart_data/nba/index.json';


// function that takes in the CSVReader object, and uses the info to generate
// the JavaScript state histogram/MI model, and then calls the main function
export default function dataFrameToStateModel(args, nextFun) {
  const dataModel = {};
  const csvInput = args.csvInput;


  // get rid of missing elements, take out the numBins parameter       
  //csvInput.data.columns = csvInput.data.columns.map((e) => 
  //  e.slice(1).filter((i) => (i !== "")));
  csvInput.data.columns = csvInput.data.columns.map(e => 
    e.filter((i) => (i !== "")));

  const numericCols = csvInput.data.colNames.filter((e,i) => 
    (metaDat.originalData.Chart.arrays[ args.csvInput.data.colNames[i] ] === "numeric"));
  

  csvInput.data.columns = csvInput.data.columns.filter((e,i) => 
    (metaDat.originalData.Chart.arrays[ args.csvInput.data.colNames[i] ] === "numeric"));
  

  csvInput.data.colNames = numericCols;

  //const numBins = args.csvInput.data.columns.map((e) => Number(e[0]));
  const numBins = Array.apply(null, Array(csvInput.data.colNames.length)).map(e => 20); //args.metaDat.metadata.numBins; 

  //dataModel.dirty = true;
  dataModel.fields = {};
  dataModel.histogram1D_storage = {};
  dataModel.histogram1D_storage[32] = {};

  let histObj; 
  const histStats = Array.apply(null, Array(csvInput.data.columns.length)).map(
    e => { 
      return {
        minVal: -1,
        maxVal: -1,
        leftEdges: [],
        rightEdges: []
      };
    }
  );

  // populate data model for 1D histogram portion
  // also get histogram stats that you can use later for 2D histogram
  // generation
  csvInput.data.colNames.forEach((name, i) => {    

    // generate histogram
    const histReturn = generateHistFromData(csvInput.data.columns[i], numBins[i]);
    histObj = histReturn.hist;
    histStats[i].minVal = histReturn.minVal;
    histStats[i].maxVal = histReturn.maxVal;
    histStats[i].delta = histObj[0].dx;
    histStats[i].leftEdges = histObj.map(e => e.x);
    histStats[i].rightEdges = histObj.map(e => (e.x + e.dx));

    //dataModel.isA = ["AnnotationStoreProvider", "FieldProvider", "Histogram1DProvider", "Histogram2DProvider", "HistogramBinHoverProvider", "LegendProvider", "MutualInformationProvider"];
    //dataModel.defaultEmptyAnnotationName = "Empty";

    dataModel.fields[`${name}`] = {};
    dataModel.fields[`${name}`].id = i;
    dataModel.fields[`${name}`].name = name;
    dataModel.fields[`${name}`].active = true;
    dataModel.fields[`${name}`].range = [histStats[i].minVal,histStats[i].maxVal];

    dataModel.histogram1D_storage[32][`${name}`] = {};
    dataModel.histogram1D_storage[32][`${name}`].max = histStats[i].maxVal;
    dataModel.histogram1D_storage[32][`${name}`].min = histStats[i].minVal;
    dataModel.histogram1D_storage[32][`${name}`].counts = 
      histObj.map( (e) => {return e.length} );
    dataModel.histogram1D_storage[32][`${name}`].name = name;
  });

  // generate joint histogram 
  dataModel.histogram2D_storage = {};
  dataModel.histogram2D_storage[32] = {};

  // populate data model for 2D histogram portion
  // for every variable, need to add an entry for it, and the other variables
  csvInput.data.colNames.forEach((var1Name, i) => {

    dataModel.histogram2D_storage[32][`${var1Name}`] = {};
    const var1_2DhistObj = dataModel.histogram2D_storage[32][`${var1Name}`];


    // for each data columns's object entry, need to add histogram info for 
    // every other column (i.e. pair) 
    // - this corresponds to one column in the joint histogram
    csvInput.data.colNames.forEach((var2Name, j) => {

      // initialize joint histogram array spaces (numBins[i] x numBins[j])
      const jointHist = Array.apply(null, Array(numBins[i])).map(e => 
        Array.apply(null, Array(numBins[j])).map(f=>0));

      var1_2DhistObj[`${var2Name}`] = {};

      var1_2DhistObj[`${var2Name}`]['annotationInfo'] = [];

      var1_2DhistObj[`${var2Name}`]['y'] = {};   
      var1_2DhistObj[`${var2Name}`]['y']['delta'] = histStats[i].delta;
      var1_2DhistObj[`${var2Name}`]['y']['extent'] = [histStats[i].minVal,histStats[i].maxVal+1];
      var1_2DhistObj[`${var2Name}`]['y']['name'] = var1Name;

      var1_2DhistObj[`${var2Name}`]['x'] = {};   
      var1_2DhistObj[`${var2Name}`]['x']['delta'] = histStats[j].delta;
      var1_2DhistObj[`${var2Name}`]['x']['extent'] = [histStats[j].minVal,histStats[j].maxVal+1];
      var1_2DhistObj[`${var2Name}`]['x']['name'] = var2Name;



      // generate the actual 2D histogram over var1name, var2name
      // do it directly in state model form

      // array of left edge, right edge of bins

      // need to iterate over all the bins
      const iBinLoc = csvInput.data.columns[i].map(
        datum => {
          const left =  histStats[i].leftEdges.map( leftVal => (datum >= leftVal) );
          const lastElem = histStats[i].rightEdges[ histStats[i].rightEdges.length-1 ];
          const right = histStats[i].rightEdges.map( rightVal => 
              //second condition takes care of case where data is at the right edge of range
              (datum < rightVal) || ((datum == lastElem) && (datum == rightVal))
          );
          return (left && right).indexOf(true);
        }
      );

      const jBinLoc = csvInput.data.columns[j].map(
        datum => {
          let left =  histStats[j].leftEdges.map( leftVal => (datum >= leftVal) );
          const lastElem = histStats[j].rightEdges[ histStats[j].rightEdges.length-1 ];
          const right = histStats[j].rightEdges.map( rightVal => 
              (datum < rightVal) || ((datum == lastElem) && (datum == rightVal))
          );
          return (left && right).indexOf(true);        
        }
      );

      iBinLoc.forEach( (loc, datInd) => {
        jointHist[iBinLoc[datInd]][jBinLoc[datInd]]++;
          } 
      );
      

      let maxCount = -1;
      var1_2DhistObj[`${var2Name}`]['bins'] = [];
      for (let ind1=0; ind1 < numBins[i]; ind1++) {
        for (let ind2=0; ind2 < numBins[j]; ind2++) {
          if (jointHist[ind1][ind2] > 0) {
            var1_2DhistObj[`${var2Name}`]['bins'].push({
              x: histStats[j].leftEdges[ind2]+
                (histStats[j].rightEdges[ind2]-histStats[j].leftEdges[ind2])/2,
              y: histStats[i].leftEdges[ind1]+
                (histStats[i].rightEdges[ind1]-histStats[i].leftEdges[ind1])/2,
              // x: histStats[j].leftEdges[ind2],
              // y: histStats[i].leftEdges[ind1],                
              count: jointHist[ind1][ind2]
            });
            if (jointHist[ind1][ind2] > maxCount) {
              maxCount = jointHist[ind1][ind2];
            }
          }
        }
      }      

      var1_2DhistObj[`${var2Name}`]['role'] = {};
      var1_2DhistObj[`${var2Name}`]['maxCount'] = maxCount;
    });
  
  });  

  dataModel.legendShapes = {
    Circle: "#Circle",
    Square: "#Square",
    Triangle: "#Triangle",
    Diamond: "#Diamond",
    X: "#X",
    Pentagon: "#Pentagon",
    InvertedTriangle: "#InvertedTriangle",
    Star: "#Star",
    Plus: "#Plus"
  };

  dataModel.legendColors = ["rgb(166, 206, 227)", "rgb(31, 120, 180)", "rgb(178, 223, 138)", "rgb(51, 160, 44)", "rgb(251, 154, 153)", "rgb(227, 26, 28)", "rgb(253, 191, 111)", "rgb(255, 127, 0)", "rgb(202, 178, 214)", "rgb(106, 61, 154)", "rgb(255, 255, 153)", "rgb(177, 89, 40)"];
  dataModel.legendEntries = ["var1","Test #2", "Variable 3"];
  dataModel.legendPriorities = ["colors", "shapes"];
  dataModel.legendDirty = true;

  //nextFun({dataModel}, null);
  return dataModel;
}


// generate histogram bins; returns the "edges" of the bins
function generateBins(minVal, maxVal, numDivisions) {

  const delta = (maxVal-minVal)/numDivisions;

  const linspace = (a,b,n) => {
    if(n<2) { return n===1?[a]:[];}
    const ret = Array(n);
    n--;
    for(let i=n;i>=0;i--) { ret[i] = (i*b+(n-i)*a)/n; }
    return ret;
  };
  return linspace(minVal, maxVal, numDivisions);

}

// function that converts one column data into corresponding histogram.
function generateHistFromData(data, numDivisions) {
  const minVal = Math.min.apply(null,data);
  const maxVal = Math.max.apply(null,data);

  numDivisions = (typeof numDivisions === "undefined") ? 
    (Math.max(Math.round(maxVal-minVal)+1,1)) : numDivisions;


  const hist = histogram({
      data : data,
      bins : generateBins(minVal, maxVal, numDivisions)
  });

  return {hist, minVal, maxVal};
}
