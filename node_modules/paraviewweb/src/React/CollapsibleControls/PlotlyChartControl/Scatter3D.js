import React                    from 'react';
import style from 'PVWStyle/ReactWidgets/PlotlySelectionWidgets.mcss';
import Select from 'react-select';
import 'react-select/dist/react-select.css';

/* eslint-disable react/no-unused-prop-types */

const PlotlyScatter3Didget = (props) => {
  function handleChange(event) {
    // const rootContainer = event.target.parentNode.parentNode.parentNode;
    // const newXArray = rootContainer.querySelector('.jsX').value;
    // const newYArray = rootContainer.querySelector('.jsY').value;
    // const newZArray = rootContainer.querySelector('.jsZ').value;
    // const forceNewPlot = props.arrays[props.chartState.x] !== props.arrays[newXArray] ||
    //   props.arrays[props.chartState.y] !== props.arrays[newYArray] ||
    //   props.arrays[props.chartState.z] !== props.arrays[newZArray];

    // have to update the correct variable (was x or y variable changed?)
    let newXArray = props.chartState.x, 
        newYArray = props.chartState.y,
        newZArray = props.chartState.z;


    if (event.axis === 'x') {
      newXArray = event.value;
    }

    if (event.axis === 'y') {
      newYArray = event.value;
    }

    if (event.axis === 'z') {
      newZArray = event.value;
    }    

    props.onChange({
      chartType: 'Scatter3D',
      x: newXArray,
      y: newYArray,
      z: newZArray,
      forceNewPlot,
    });
  }

              // <select className={['jsX', style.fullWidth].join(' ')} onChange={handleChange} value={props.chartState.x}>
              //   {Object.keys(props.arrays).map(arrayName => <option value={arrayName} key={arrayName}>{arrayName}</option>)}
              // </select>

              // <select className={['jsY', style.fullWidth].join(' ')} onChange={handleChange} value={props.chartState.y}>
              //   {Object.keys(props.arrays).map(arrayName => <option value={arrayName} key={arrayName}>{arrayName}</option>)}
              // </select>     
              
              // <select className={['jsZ', style.fullWidth].join(' ')} onChange={handleChange} value={props.chartState.z}>
              //   {Object.keys(props.arrays).map(arrayName => <option value={arrayName} key={arrayName}>{arrayName}</option>)}
              // </select>
  return (
    <div>
      <table className={style.fullWidth}>
        <tbody>
          <tr>
            <td className={style.label}>x</td>
            <td className={style.fullWidth}>

              <Select className={['jsX', style.fullWidth].join(' ')}
                  clearable="false"
                  value={props.chartState.x}
                  options={Object.keys(props.arrays).map(name => {return {value: name, label: name, axis: 'x'};} )}
                  onChange={handleChange}
              />


            </td>
          </tr>
          <tr>
            <td className={style.label}>y</td>
            <td>

              <Select className={['jsY', style.fullWidth].join(' ')}
                  clearable="false"
                  value={props.chartState.y}
                  options={Object.keys(props.arrays).map(name => {return {value: name, label: name, axis: 'y'};} )}
                  onChange={handleChange}
              />
            


            </td>
          </tr>
          <tr>
            <td className={style.label}>z</td>
            <td>

              <Select className={['jsZ', style.fullWidth].join(' ')}
                  clearable="false"
                  value={props.chartState.z}
                  options={Object.keys(props.arrays).map(name => {return {value: name, label: name, axis: 'z'};} )}
                  onChange={handleChange}
              />


            </td>
          </tr>
        </tbody>
      </table>
    </div>
  );
};

PlotlyScatter3Didget.propTypes = {
  chartState: React.PropTypes.object,
  arrays: React.PropTypes.object,
  onChange: React.PropTypes.func,
};

PlotlyScatter3Didget.defaultProps = {
  chartState: {},
  arrays: [],
  onChange: () => {},
};

export default PlotlyScatter3Didget;
